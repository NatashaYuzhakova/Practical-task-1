#!/usr/bin/env python
# coding: utf-8

# # Практическое задание №1

# ## Шаг 1. Загрузка данных

# ### 1.1. Скачайте набор данных (например, CSV-файл с данными о продажах, статистике, или любые другие данные, которые вас интересуют).

# *Я скачала сведения  о преступности в России 2003-2007 годы*

# ### 1.2. Используйте библиотеку Pandas, чтобы загрузить данные в Python и создать DataFrame.

# ## Шаг 2. Анализ данных

# ### 2.1. Оцените общий вид данных: выведите первые несколько строк DataFrame, проверьте наличие пропущенных значений и типы данных столбцов.

# In[17]:


import pandas as pd #Импортируем библиотеку пандас в пд


# In[18]:


data=pd.read_csv("C:/Users/natasha/Desktop/Data Sciece/Практическое задание 1/crime.csv",delimiter=",") #чистаем файл и переносим его в переменную Дата


# In[19]:


print(data.head(10)) # Выводим переменную Дата - заголовок (1 строка), мы получили двумерный массив DataFrame. От 0 до 9 - это индекс строчных значений, вверху название столбцов.


# ### 2.2. Выполните простой анализ данных, такой как подсчет средних значений, медианы, минимальных и максимальных значений для числовых столбцов.

# In[20]:


print(data.columns) # Свойство для получения имен колонок


# In[21]:


data['Месяц'].head(10) # Выведем первые 10 строк по имени месяц


# In[22]:


data[(data['Общее количество преступлений'] > 270000)]['Месяц'].head(20) # Получаем DataFrame за какие месяца преступность больше 270000  


# In[ ]:





# In[23]:


data.groupby('Серьезные')['Месяц'].value_counts() # Группировка по серьезности преступлений от меньшего к большему. Исходя из данной группировки, мы видим, что минимальное значение в 2007 году, максимальное в 2006 году.


# In[24]:


print(data.info()) # Выводим переменную Дата - всю остальную инфо. Видим, что всего 60 записей и 16 столбцов


# In[25]:


print(data.describe()) # Выводи переменную Дата - статистические данные. Средние значения, стандарт, минимум, максимум, 25%, 50%, 75% - по всем столбцам.


# ## Шаг 3. Визуализация данных

# ### 3.1. Используйте библиотеку Matplotlib, чтобы создать несколько графиков для визуализации данных. Например, можно построить гистограмму распределения данных или график зависимости между двумя столбцами.

# In[26]:


get_ipython().run_line_magic('matplotlib', 'inline')


# In[27]:


import matplotlib.pyplot as plt


# In[28]:


data.plot(kind='scatter',x='Общее количество преступлений',y='Причинение вреда здоровью',color='red') # Сравнивающий точечный график, сравнивает два значения


# In[29]:


plt.show()


# In[30]:


data.plot(kind='bar',x='Месяц',y='Кража') # Простой линейный график. По которому видн как меняется преступность в категории кража по годам. Минимально - 2003 год, максимально - 2006-2006 год.


# ### 3.2. Добавьте заголовки графиков, подписи осей и легенду (если необходимо) для более четкой интерпретации.

# In[31]:


data.plot(kind='bar',x='Месяц',y='Кража',title='My title')


# ## Шаг 4. Отчет

# ### 4.1. Напишите краткий отчет (в виде комментариев в Jupyter Notebook или отдельного текстового файла), описывающий ваши наблюдения и выводы на основе анализа и визуализации данных.

# ### 4.2. Опубликуйте ссылку на Github в LMS Odin.

# In[ ]:





# In[ ]:




